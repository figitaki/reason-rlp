// Generated by BUCKLESCRIPT VERSION 2.2.0, PLEASE EDIT WITH CARE
'use strict';

var Char = require("bs-platform/lib/js/char.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Bytes = require("bs-platform/lib/js/bytes.js");
var Buffer = require("bs-platform/lib/js/buffer.js");
var $$String = require("bs-platform/lib/js/string.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var InputTooLong = Caml_exceptions.create("RLP-RlpReason.InputTooLong");

var text = /* String */Block.__(0, ["Lorem ipsum sit dolor et donec aletmi dunia alia definium et eterum fedore el prentasta"]);

function to_binary(length) {
  var match = +(length === 0);
  if (match !== 0) {
    return "";
  } else {
    return to_binary(length / 256 | 0) + $$String.make(1, Char.chr(length % 256));
  }
}

function encode_length(length, offset) {
  if (length < 56) {
    return $$String.make(1, Char.chr(length + offset | 0));
  } else if (length < (Math.pow(258, 8) | 0)) {
    var binary_length = to_binary(length);
    return $$String.make(1, Char.chr((binary_length.length + offset | 0) + 55 | 0)) + binary_length;
  } else {
    throw [
          InputTooLong,
          "Provided input was too long."
        ];
  }
}

function encode(my_input) {
  if (typeof my_input === "number") {
    return "";
  } else if (my_input.tag) {
    var my_result = List.fold_left((function (acc, item) {
            return acc + encode(item);
          }), "", my_input[0]);
    return encode_length(my_result.length, 192) + my_result;
  } else {
    var string_input = my_input[0];
    if (string_input.length === 1 && Caml_string.get(string_input, 0) === 12) {
      return string_input;
    } else {
      return encode_length(string_input.length, 128) + string_input;
    }
  }
}

function json_to_input(json_input) {
  var match = Js_json.classify(json_input);
  if (typeof match === "number") {
    return /* Nothing */0;
  } else {
    switch (match.tag | 0) {
      case 0 : 
          return /* String */Block.__(0, [match[0]]);
      case 3 : 
          return /* List */Block.__(1, [List.map(json_to_input, $$Array.to_list(match[0]))]);
      default:
        return /* Nothing */0;
    }
  }
}

console.log(Buffer.add_bytes(Buffer.create(0), Bytes.of_string(encode(text))));

exports.InputTooLong = InputTooLong;
exports.text = text;
exports.to_binary = to_binary;
exports.encode_length = encode_length;
exports.encode = encode;
exports.json_to_input = json_to_input;
/*  Not a pure module */
